
crc_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a19  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091b  00000000  00000000  00000cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ff  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000018d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a9  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001e65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  c4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <_Z11crc16_ccitthj>:
 * Author : USER
 */ 

#include <avr/io.h>

uint16_t crc16_ccitt(uint8_t data, uint16_t crc) {
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	00 d0       	rcall	.+0      	; 0xd2 <_Z11crc16_ccitthj+0x6>
  d2:	00 d0       	rcall	.+0      	; 0xd4 <_Z11crc16_ccitthj+0x8>
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	8a 83       	std	Y+2, r24	; 0x02
  da:	7c 83       	std	Y+4, r23	; 0x04
  dc:	6b 83       	std	Y+3, r22	; 0x03
    crc ^= (data << 8);
  de:	8a 81       	ldd	r24, Y+2	; 0x02
  e0:	88 2f       	mov	r24, r24
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	98 2f       	mov	r25, r24
  e6:	88 27       	eor	r24, r24
  e8:	9c 01       	movw	r18, r24
  ea:	8b 81       	ldd	r24, Y+3	; 0x03
  ec:	9c 81       	ldd	r25, Y+4	; 0x04
  ee:	82 27       	eor	r24, r18
  f0:	93 27       	eor	r25, r19
  f2:	9c 83       	std	Y+4, r25	; 0x04
  f4:	8b 83       	std	Y+3, r24	; 0x03
    for (uint8_t i = 0; i < 8; i++) {
  f6:	19 82       	std	Y+1, r1	; 0x01
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	88 30       	cpi	r24, 0x08	; 8
  fc:	c8 f4       	brcc	.+50     	; 0x130 <_Z11crc16_ccitthj+0x64>
        if (crc & 0x8000) {
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	9c 81       	ldd	r25, Y+4	; 0x04
 102:	99 23       	and	r25, r25
 104:	5c f4       	brge	.+22     	; 0x11c <_Z11crc16_ccitthj+0x50>
            crc = (crc << 1) ^ 0x1021;
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	9c 81       	ldd	r25, Y+4	; 0x04
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	21 e2       	ldi	r18, 0x21	; 33
 110:	82 27       	eor	r24, r18
 112:	20 e1       	ldi	r18, 0x10	; 16
 114:	92 27       	eor	r25, r18
 116:	9c 83       	std	Y+4, r25	; 0x04
 118:	8b 83       	std	Y+3, r24	; 0x03
 11a:	06 c0       	rjmp	.+12     	; 0x128 <_Z11crc16_ccitthj+0x5c>
        } else {
            crc <<= 1;
 11c:	8b 81       	ldd	r24, Y+3	; 0x03
 11e:	9c 81       	ldd	r25, Y+4	; 0x04
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	9c 83       	std	Y+4, r25	; 0x04
 126:	8b 83       	std	Y+3, r24	; 0x03

#include <avr/io.h>

uint16_t crc16_ccitt(uint8_t data, uint16_t crc) {
    crc ^= (data << 8);
    for (uint8_t i = 0; i < 8; i++) {
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	89 83       	std	Y+1, r24	; 0x01
 12e:	e4 cf       	rjmp	.-56     	; 0xf8 <_Z11crc16_ccitthj+0x2c>
        } else {
            crc <<= 1;
        }
        crc &= 0xFFFF;
    }
    return crc;
 130:	8b 81       	ldd	r24, Y+3	; 0x03
 132:	9c 81       	ldd	r25, Y+4	; 0x04
}
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	0f 90       	pop	r0
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <main>:

int main() {    
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	00 d0       	rcall	.+0      	; 0x148 <main+0x6>
 148:	00 d0       	rcall	.+0      	; 0x14a <main+0x8>
 14a:	00 d0       	rcall	.+0      	; 0x14c <main+0xa>
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
    uint8_t Rd = 0, Rr = 0;
 150:	1b 82       	std	Y+3, r1	; 0x03
 152:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t i=1; 
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	89 83       	std	Y+1, r24	; 0x01
    uint8_t j=1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	8a 83       	std	Y+2, r24	; 0x02
    volatile uint16_t crc = 0x00;
 15c:	1e 82       	std	Y+6, r1	; 0x06
 15e:	1d 82       	std	Y+5, r1	; 0x05
    while (true) {
      Rr = i;
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	8c 83       	std	Y+4, r24	; 0x04
      while (true) {
        Rd = j;
 164:	8a 81       	ldd	r24, Y+2	; 0x02
 166:	8b 83       	std	Y+3, r24	; 0x03
        asm volatile ("adc %0, %1": "=r" (Rd): "r" (Rr));
 168:	8c 81       	ldd	r24, Y+4	; 0x04
 16a:	88 1f       	adc	r24, r24
 16c:	8b 83       	std	Y+3, r24	; 0x03
        crc = crc16_ccitt(Rd, crc);
 16e:	8d 81       	ldd	r24, Y+5	; 0x05
 170:	9e 81       	ldd	r25, Y+6	; 0x06
 172:	bc 01       	movw	r22, r24
 174:	8b 81       	ldd	r24, Y+3	; 0x03
 176:	0e 94 66 00 	call	0xcc	; 0xcc <_Z11crc16_ccitthj>
 17a:	9e 83       	std	Y+6, r25	; 0x06
 17c:	8d 83       	std	Y+5, r24	; 0x05
        j = j + 1;
 17e:	8a 81       	ldd	r24, Y+2	; 0x02
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	8a 83       	std	Y+2, r24	; 0x02
        if (j> 63) break;
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	80 34       	cpi	r24, 0x40	; 64
 188:	08 f4       	brcc	.+2      	; 0x18c <main+0x4a>
    uint8_t i=1; 
    uint8_t j=1;
    volatile uint16_t crc = 0x00;
    while (true) {
      Rr = i;
      while (true) {
 18a:	ec cf       	rjmp	.-40     	; 0x164 <main+0x22>
        Rd = j;
        asm volatile ("adc %0, %1": "=r" (Rd): "r" (Rr));
        crc = crc16_ccitt(Rd, crc);
        j = j + 1;
        if (j> 63) break;
 18c:	00 00       	nop
      }
      i = i + 1;
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	8f 5f       	subi	r24, 0xFF	; 255
 192:	89 83       	std	Y+1, r24	; 0x01
      if (i > 63) break;
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	80 34       	cpi	r24, 0x40	; 64
 198:	08 f4       	brcc	.+2      	; 0x19c <main+0x5a>
int main() {    
    uint8_t Rd = 0, Rr = 0;
    uint8_t i=1; 
    uint8_t j=1;
    volatile uint16_t crc = 0x00;
    while (true) {
 19a:	e2 cf       	rjmp	.-60     	; 0x160 <main+0x1e>
        crc = crc16_ccitt(Rd, crc);
        j = j + 1;
        if (j> 63) break;
      }
      i = i + 1;
      if (i > 63) break;
 19c:	00 00       	nop
    }
	return 0;
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
}
 1a2:	26 96       	adiw	r28, 0x06	; 6
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
